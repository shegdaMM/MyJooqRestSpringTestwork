/*
 * This file is generated by jOOQ.
 */
package ua.at.shegda.patientcards.model.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.at.shegda.patientcards.model.Indexes;
import ua.at.shegda.patientcards.model.Keys;
import ua.at.shegda.patientcards.model.Patientregsys;
import ua.at.shegda.patientcards.model.tables.records.MedicalsessionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Medicalsession extends TableImpl<MedicalsessionRecord> {

    private static final long serialVersionUID = 1798700264;

    /**
     * The reference instance of <code>patientregsys.medicalsession</code>
     */
    public static final Medicalsession MEDICALSESSION = new Medicalsession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicalsessionRecord> getRecordType() {
        return MedicalsessionRecord.class;
    }

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_ID</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> MEDICALSESSIONCOL_ID = createField(DSL.name("MedicalSessioncol_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>patientregsys.medicalsession.Patient_Patientcol_ID</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> PATIENT_PATIENTCOL_ID = createField(DSL.name("Patient_Patientcol_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_dateRegistration</code>.
     */
    public final TableField<MedicalsessionRecord, LocalDateTime> MEDICALSESSIONCOL_DATEREGISTRATION = createField(DSL.name("MedicalSessioncol_dateRegistration"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_dateRegistrationDown</code>.
     */
    public final TableField<MedicalsessionRecord, LocalDate> MEDICALSESSIONCOL_DATEREGISTRATIONDOWN = createField(DSL.name("MedicalSessioncol_dateRegistrationDown"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_diagnoz</code>.
     */
    public final TableField<MedicalsessionRecord, String> MEDICALSESSIONCOL_DIAGNOZ = createField(DSL.name("MedicalSessioncol_diagnoz"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_medicaments</code>.
     */
    public final TableField<MedicalsessionRecord, String> MEDICALSESSIONCOL_MEDICAMENTS = createField(DSL.name("MedicalSessioncol_medicaments"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_discriptions</code>.
     */
    public final TableField<MedicalsessionRecord, String> MEDICALSESSIONCOL_DISCRIPTIONS = createField(DSL.name("MedicalSessioncol_discriptions"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_positionfloor</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> MEDICALSESSIONCOL_POSITIONFLOOR = createField(DSL.name("MedicalSessioncol_positionfloor"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol_possitionward</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> MEDICALSESSIONCOL_POSSITIONWARD = createField(DSL.name("MedicalSessioncol_possitionward"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patientregsys.medicalsession.MedicalSessioncol__possitionbad</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> MEDICALSESSIONCOL__POSSITIONBAD = createField(DSL.name("MedicalSessioncol__possitionbad"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patientregsys.medicalsession.PositionBuild_PositionBuildcol_Id</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> POSITIONBUILD_POSITIONBUILDCOL_ID = createField(DSL.name("PositionBuild_PositionBuildcol_Id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patientregsys.medicalsession.Doctor_Doctorcol_ID</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> DOCTOR_DOCTORCOL_ID = createField(DSL.name("Doctor_Doctorcol_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>patientregsys.medicalsession.status_statuscol_ID</code>.
     */
    public final TableField<MedicalsessionRecord, Integer> STATUS_STATUSCOL_ID = createField(DSL.name("status_statuscol_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>patientregsys.medicalsession</code> table reference
     */
    public Medicalsession() {
        this(DSL.name("medicalsession"), null);
    }

    /**
     * Create an aliased <code>patientregsys.medicalsession</code> table reference
     */
    public Medicalsession(String alias) {
        this(DSL.name(alias), MEDICALSESSION);
    }

    /**
     * Create an aliased <code>patientregsys.medicalsession</code> table reference
     */
    public Medicalsession(Name alias) {
        this(alias, MEDICALSESSION);
    }

    private Medicalsession(Name alias, Table<MedicalsessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Medicalsession(Name alias, Table<MedicalsessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Medicalsession(Table<O> child, ForeignKey<O, MedicalsessionRecord> key) {
        super(child, key, MEDICALSESSION);
    }

    @Override
    public Schema getSchema() {
        return Patientregsys.PATIENTREGSYS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDICALSESSION_FK_MEDICALSESSION_DOCTOR1_IDX, Indexes.MEDICALSESSION_FK_MEDICALSESSION_PATIENT_IDX, Indexes.MEDICALSESSION_FK_MEDICALSESSION_POSITIONBUILD1_IDX, Indexes.MEDICALSESSION_FK_MEDICALSESSION_STATUS1_IDX, Indexes.MEDICALSESSION_PRIMARY);
    }

    @Override
    public Identity<MedicalsessionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDICALSESSION;
    }

    @Override
    public UniqueKey<MedicalsessionRecord> getPrimaryKey() {
        return Keys.KEY_MEDICALSESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<MedicalsessionRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicalsessionRecord>>asList(Keys.KEY_MEDICALSESSION_PRIMARY);
    }

    @Override
    public List<ForeignKey<MedicalsessionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MedicalsessionRecord, ?>>asList(Keys.FK_MEDICALSESSION_PATIENT, Keys.FK_MEDICALSESSION_POSITIONBUILD1, Keys.FK_MEDICALSESSION_DOCTOR1, Keys.FK_MEDICALSESSION_STATUS1);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_MEDICALSESSION_PATIENT);
    }

    public Positionbuild positionbuild() {
        return new Positionbuild(this, Keys.FK_MEDICALSESSION_POSITIONBUILD1);
    }

    public Doctor doctor() {
        return new Doctor(this, Keys.FK_MEDICALSESSION_DOCTOR1);
    }

    public Status status() {
        return new Status(this, Keys.FK_MEDICALSESSION_STATUS1);
    }

    @Override
    public Medicalsession as(String alias) {
        return new Medicalsession(DSL.name(alias), this);
    }

    @Override
    public Medicalsession as(Name alias) {
        return new Medicalsession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Medicalsession rename(String name) {
        return new Medicalsession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Medicalsession rename(Name name) {
        return new Medicalsession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, LocalDateTime, LocalDate, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
