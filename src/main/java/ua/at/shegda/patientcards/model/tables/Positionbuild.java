/*
 * This file is generated by jOOQ.
 */
package ua.at.shegda.patientcards.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.at.shegda.patientcards.model.Indexes;
import ua.at.shegda.patientcards.model.Keys;
import ua.at.shegda.patientcards.model.Patientregsys;
import ua.at.shegda.patientcards.model.tables.records.PositionbuildRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positionbuild extends TableImpl<PositionbuildRecord> {

    private static final long serialVersionUID = -1087824334;

    /**
     * The reference instance of <code>patientregsys.positionbuild</code>
     */
    public static final Positionbuild POSITIONBUILD = new Positionbuild();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionbuildRecord> getRecordType() {
        return PositionbuildRecord.class;
    }

    /**
     * The column <code>patientregsys.positionbuild.PositionBuildcol_Id</code>.
     */
    public final TableField<PositionbuildRecord, Integer> POSITIONBUILDCOL_ID = createField(DSL.name("PositionBuildcol_Id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>patientregsys.positionbuild.PositionBuildcol_name</code>.
     */
    public final TableField<PositionbuildRecord, String> POSITIONBUILDCOL_NAME = createField(DSL.name("PositionBuildcol_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * Create a <code>patientregsys.positionbuild</code> table reference
     */
    public Positionbuild() {
        this(DSL.name("positionbuild"), null);
    }

    /**
     * Create an aliased <code>patientregsys.positionbuild</code> table reference
     */
    public Positionbuild(String alias) {
        this(DSL.name(alias), POSITIONBUILD);
    }

    /**
     * Create an aliased <code>patientregsys.positionbuild</code> table reference
     */
    public Positionbuild(Name alias) {
        this(alias, POSITIONBUILD);
    }

    private Positionbuild(Name alias, Table<PositionbuildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positionbuild(Name alias, Table<PositionbuildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Positionbuild(Table<O> child, ForeignKey<O, PositionbuildRecord> key) {
        super(child, key, POSITIONBUILD);
    }

    @Override
    public Schema getSchema() {
        return Patientregsys.PATIENTREGSYS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POSITIONBUILD_POSITIONBUILDCOL_NAME_UNIQUE, Indexes.POSITIONBUILD_PRIMARY);
    }

    @Override
    public Identity<PositionbuildRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POSITIONBUILD;
    }

    @Override
    public UniqueKey<PositionbuildRecord> getPrimaryKey() {
        return Keys.KEY_POSITIONBUILD_PRIMARY;
    }

    @Override
    public List<UniqueKey<PositionbuildRecord>> getKeys() {
        return Arrays.<UniqueKey<PositionbuildRecord>>asList(Keys.KEY_POSITIONBUILD_PRIMARY, Keys.KEY_POSITIONBUILD_POSITIONBUILDCOL_NAME_UNIQUE);
    }

    @Override
    public Positionbuild as(String alias) {
        return new Positionbuild(DSL.name(alias), this);
    }

    @Override
    public Positionbuild as(Name alias) {
        return new Positionbuild(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positionbuild rename(String name) {
        return new Positionbuild(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positionbuild rename(Name name) {
        return new Positionbuild(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
