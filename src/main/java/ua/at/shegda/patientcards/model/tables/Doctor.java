/*
 * This file is generated by jOOQ.
 */
package ua.at.shegda.patientcards.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.at.shegda.patientcards.model.Indexes;
import ua.at.shegda.patientcards.model.Keys;
import ua.at.shegda.patientcards.model.Patientregsys;
import ua.at.shegda.patientcards.model.tables.records.DoctorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctor extends TableImpl<DoctorRecord> {

    private static final long serialVersionUID = 1141149834;

    /**
     * The reference instance of <code>patientregsys.doctor</code>
     */
    public static final Doctor DOCTOR = new Doctor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorRecord> getRecordType() {
        return DoctorRecord.class;
    }

    /**
     * The column <code>patientregsys.doctor.Doctorcol_ID</code>.
     */
    public final TableField<DoctorRecord, Integer> DOCTORCOL_ID = createField(DSL.name("Doctorcol_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_name</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_NAME = createField(DSL.name("Doctorcol_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_surname</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_SURNAME = createField(DSL.name("Doctorcol_surname"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_otchestvo</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_OTCHESTVO = createField(DSL.name("Doctorcol_otchestvo"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_dateOfBirth</code>.
     */
    public final TableField<DoctorRecord, LocalDate> DOCTORCOL_DATEOFBIRTH = createField(DSL.name("Doctorcol_dateOfBirth"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_discription</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_DISCRIPTION = createField(DSL.name("Doctorcol_discription"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_specialnost</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_SPECIALNOST = createField(DSL.name("Doctorcol_specialnost"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_university</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_UNIVERSITY = createField(DSL.name("Doctorcol_university"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_address</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_ADDRESS = createField(DSL.name("Doctorcol_address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.doctor.Doctorcol_phone</code>.
     */
    public final TableField<DoctorRecord, String> DOCTORCOL_PHONE = createField(DSL.name("Doctorcol_phone"), org.jooq.impl.SQLDataType.VARCHAR(13).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.login</code>.
     */
    public final TableField<DoctorRecord, String> LOGIN = createField(DSL.name("login"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.password</code>.
     */
    public final TableField<DoctorRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.doctor.type</code>. doctor - for doctors
 admin - for administator of sistem
     */
    public final TableField<DoctorRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("doctor", org.jooq.impl.SQLDataType.VARCHAR)), this, "doctor - for doctors\n admin - for administator of sistem");

    /**
     * Create a <code>patientregsys.doctor</code> table reference
     */
    public Doctor() {
        this(DSL.name("doctor"), null);
    }

    /**
     * Create an aliased <code>patientregsys.doctor</code> table reference
     */
    public Doctor(String alias) {
        this(DSL.name(alias), DOCTOR);
    }

    /**
     * Create an aliased <code>patientregsys.doctor</code> table reference
     */
    public Doctor(Name alias) {
        this(alias, DOCTOR);
    }

    private Doctor(Name alias, Table<DoctorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doctor(Name alias, Table<DoctorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Doctor(Table<O> child, ForeignKey<O, DoctorRecord> key) {
        super(child, key, DOCTOR);
    }

    @Override
    public Schema getSchema() {
        return Patientregsys.PATIENTREGSYS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_PRIMARY);
    }

    @Override
    public Identity<DoctorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTOR;
    }

    @Override
    public UniqueKey<DoctorRecord> getPrimaryKey() {
        return Keys.KEY_DOCTOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<DoctorRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorRecord>>asList(Keys.KEY_DOCTOR_PRIMARY);
    }

    @Override
    public Doctor as(String alias) {
        return new Doctor(DSL.name(alias), this);
    }

    @Override
    public Doctor as(Name alias) {
        return new Doctor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(String name) {
        return new Doctor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(Name name) {
        return new Doctor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, LocalDate, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
