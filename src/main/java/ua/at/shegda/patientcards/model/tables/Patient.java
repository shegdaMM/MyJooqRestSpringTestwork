/*
 * This file is generated by jOOQ.
 */
package ua.at.shegda.patientcards.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.at.shegda.patientcards.model.Indexes;
import ua.at.shegda.patientcards.model.Keys;
import ua.at.shegda.patientcards.model.Patientregsys;
import ua.at.shegda.patientcards.model.enums.PatientPatientcolSex;
import ua.at.shegda.patientcards.model.tables.records.PatientRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = -1398438226;

    /**
     * The reference instance of <code>patientregsys.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>patientregsys.patient.Patientcol_ID</code>.
     */
    public final TableField<PatientRecord, Integer> PATIENTCOL_ID = createField(DSL.name("Patientcol_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_name</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_NAME = createField(DSL.name("Patientcol_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_surname</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_SURNAME = createField(DSL.name("Patientcol_surname"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_otchestvo</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_OTCHESTVO = createField(DSL.name("Patientcol_otchestvo"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_sex</code>.
     */
    public final TableField<PatientRecord, PatientPatientcolSex> PATIENTCOL_SEX = createField(DSL.name("Patientcol_sex"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(ua.at.shegda.patientcards.model.enums.PatientPatientcolSex.class), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_dateOfBirth</code>.
     */
    public final TableField<PatientRecord, LocalDate> PATIENTCOL_DATEOFBIRTH = createField(DSL.name("Patientcol_dateOfBirth"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_post</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_POST = createField(DSL.name("Patientcol_post"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_pasportData</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_PASPORTDATA = createField(DSL.name("Patientcol_pasportData"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_numberMedPolis</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_NUMBERMEDPOLIS = createField(DSL.name("Patientcol_numberMedPolis"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_dateOutPolis</code>.
     */
    public final TableField<PatientRecord, LocalDate> PATIENTCOL_DATEOUTPOLIS = createField(DSL.name("Patientcol_dateOutPolis"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_address</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_ADDRESS = createField(DSL.name("Patientcol_address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_phone</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_PHONE = createField(DSL.name("Patientcol_phone"), org.jooq.impl.SQLDataType.VARCHAR(13), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_email</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_EMAIL = createField(DSL.name("Patientcol_email"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_alergies</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_ALERGIES = createField(DSL.name("Patientcol_alergies"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patientregsys.patient.Patientcol_discription</code>.
     */
    public final TableField<PatientRecord, String> PATIENTCOL_DISCRIPTION = createField(DSL.name("Patientcol_discription"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>patientregsys.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    /**
     * Create an aliased <code>patientregsys.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>patientregsys.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    @Override
    public Schema getSchema() {
        return Patientregsys.PATIENTREGSYS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_PRIMARY);
    }

    @Override
    public Identity<PatientRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PATIENT;
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientRecord>>asList(Keys.KEY_PATIENT_PRIMARY);
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String, PatientPatientcolSex, LocalDate, String, String, String, LocalDate, String, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
